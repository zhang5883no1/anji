<!DOCTYPE form-validation PUBLIC
     "-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.3.0//EN"
     "validator_1_3_0.dtd">
<!--
	
	This file contains the default Struts Validator pluggable validator
	definitions.  It should be placed somewhere under /WEB-INF and
	referenced in the struts-config.xml under the plug-in element
	for the ValidatorPlugIn.
	
	<plug-in className="org.apache.struts.validator.ValidatorPlugIn">
	<set-property property="pathnames" value="/WEB-INF/validator-rules.xml,
	/WEB-INF/validation.xml"/>
	</plug-in>
	
	These are the default error messages associated with
	each validator defined in this file.  They should be
	added to your projects ApplicationResources.properties
	file or you can associate new ones by modifying the
	pluggable validators msg attributes in this file.
	
	# Struts Validator Error Messages
	errors.required={0} is required.
	errors.minlength={0} can not be less than {1} characters.
	errors.maxlength={0} can not be greater than {1} characters.
	errors.invalid={0} is invalid.
	
	errors.byte={0} must be a byte.
	errors.short={0} must be a short.
	errors.integer={0} must be an integer.
	errors.long={0} must be a long.
	errors.float={0} must be a float.
	errors.double={0} must be a double.
	
	errors.date={0} is not a date.
	errors.range={0} is not in the range {1} through {2}.
	errors.creditcard={0} is an invalid credit card number.
	errors.email={0} is an invalid e-mail address.
	
-->

<form-validation>
	<global>

		<validator name="required"
			classname="org.springmodules.validation.commons.FieldChecks"
			method="validateRequired"
			methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.springframework.validation.Errors"
			msg="">

			<javascript>
				<![CDATA[
					
					function validateRequired(form) 
					{
						var isValid = true;
						var focusField = null;
						var i = 0;
						var fields = new Array();
						oRequired = new required();
						// Start: Loop
						for (x in oRequired) 
						{

							var field = form[oRequired[x][0]];

							if(field == null)
								continue;

							if (field.type == 'text' || field.type == 'textarea' || field.type == 'file' || field.type == 'select-one' || field.type == 'radio' || field.type == 'password' || 
								field.type == 'checkbox' || (field.length > 0 && field[0].type == 'radio')) 
							{

								var value = '';
								if (field.type == "select-one") 
								{
									var si = field.selectedIndex;
									if (si >= 0) 
									{
										value = field.options[si].value;
									}
								} 
								else if (field.type == 'checkbox') 
								{
									if(!field.checked)
										value = '';
									else
										value='checked';
								} 
								else 
								{
									value = field.value;
								}


								if (field.type == 'radio') 
								{
									if (!field.checked) 
									{
										focusField = field;
										fields[i++] = oRequired[x][1];
										isValid=false;
									}
								}
								else if ((field.length > 0) && (field[0].type == 'radio')) 
								{
									isChecked=-1;
									for (loop=0;loop < field.length;loop++) 
									{
										if (field[loop].checked) 
										{
											isChecked=loop;
											break; // only one needs to be checked
										}
									}
									if (isChecked < 0) 
									{
										if (i == 0) 
										{
											focusField = field[0];
										}
										fields[i++] = oRequired[x][1];
										isValid=false;
									}
								}
								else if (trim(value).length == 0) 
								{
									if (i == 0)
									{
										focusField = field;
									}
									fields[i++] = oRequired[x][1];
									isValid = false;
								} 
							}

							if(!isValid)
								break;
						}
						// End: Loop
						if (fields.length > 0) 
						{
							focusField.focus();
							alert(fields.join('\n'));
						}
						return isValid;
					}

					// Trim whitespace from left and right sides of s.
					function trim(s) 
					{
						return s.replace( /^\s*/, "" ).replace( /\s*$/, "" );
					}			
            	]]>
			</javascript>

		</validator>

		<validator name="maxlength"
			classname="org.springmodules.validation.commons.FieldChecks"
			method="validateMaxLength"
			methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.springframework.validation.Errors"
			depends="" msg="">

			<javascript>
				<![CDATA[
					function validateMaxLength(form)
					{
						var isValid = true;
						var focusField = null;
						var i = 0;
						var fields = new Array();
						oMaxLength = new maxlength();
						
						// Start: Loop
						for (x in oMaxLength)
						{
							var field = form[oMaxLength[x][0]];

							if(field == null)
								continue;

							if (field.type == 'text' || field.type == 'textarea'|| field.type == 'password')
							{
								var iMax = parseInt(oMaxLength[x][2]("maxlength"));
								if (field.value.length > iMax)
								{
									if (i == 0)
									{
										focusField = field;
									}
									fields[i++] = oMaxLength[x][1];
									isValid = false;
								}
							}
							
							if(!isValid)
								break;
						}
						// End: Loop
						
						if (fields.length > 0)
						{
							focusField.focus();
							alert(fields.join('\n'));
						}
						return isValid;
					}
            	]]>
			</javascript>

		</validator>
	</global>
</form-validation>